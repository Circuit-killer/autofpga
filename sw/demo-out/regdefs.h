////////////////////////////////////////////////////////////////////////////////
//
// Filename:	demo-out/regdefs.h
//
// Project:	VideoZip, a ZipCPU SoC supporting video functionality
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	./autofpga ./autofpga clock.txt bkram.txt flash.txt zipmaster.txt wbubus.txt dlyarbiter.txt gps.txt icape.txt mdio.txt spio.txt wboledbw.txt rtcdate.txt hdmi.txt clkcounter.txt gpio.txt pwrcount.txt version.txt buserr.txt pic.txt rtcgps.txt wbmouse.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2017, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	REGDEFS_H
#define	REGDEFS_H


#define	R_BUSERR       	0x00000400	// 00000400, wbregs names: BUSERR
#define	R_PIC          	0x00000404	// 00000404, wbregs names: PIC
// HDMI-IN Clock Counter (measures clock speed)
#define	R_HDMI_INCLK   	0x00000408	// 00000408, wbregs names: HCLKIN
// HDMI-OUT Clock Counter (measures clock speed)
#define	R_HDMI_OUTCLK  	0x0000040c	// 0000040c, wbregs names: HCLKOUT
#define	R_DATE         	0x00000410	// 00000410, wbregs names: RTCDATE, DATE
#define	R_GPIO         	0x00000414	// 00000414, wbregs names: GPIO, GPI, GPO
#define	PWCOUNT        	0x00000418	// 00000418, wbregs names: PWRCOUNT
#define	R_SPIO         	0x0000041c	// 0000041c, wbregs names: SPIO
// SYSCLK Clock Counter (measures clock speed)
#define	R_SYSCLK       	0x00000420	// 00000420, wbregs names: SYSCLK
#define	R_VERSION      	0x00000424	// 00000424, wbregs names: VERSION


// GPS clock tracker, control loop settings registers
#define	R_GPS_ALPHA    	0x00000500	// 00000500, wbregs names: ALPHA
#define	R_GPS_BETA     	0x00000504	// 00000500, wbregs names: BETA
#define	R_GPS_GAMMA    	0x00000508	// 00000500, wbregs names: GAMMA
#define	R_GPS_STEP     	0x0000050c	// 00000500, wbregs names: STEP
#define	R_MOUSE_STAT   	0x00000510	// 00000510, wbregs names: MSTAT
#define	R_MOUSE_RAW    	0x00000514	// 00000510, wbregs names: MRAW
#define	R_SCRN_MOUSE   	0x00000518	// 00000510, wbregs names: MOUSE
#define	R_SCRN_SIZE    	0x0000051c	// 00000510, wbregs names: MSIZ
#define	R_OLED_CMD     	0x00000520	// 00000520, wbregs names: OLED
#define	R_OLED_CDATA   	0x00000524	// 00000520, wbregs names: OLEDCA
#define	R_OLED_CDATB   	0x00000528	// 00000520, wbregs names: OLEDCB
#define	R_OLED_DATA    	0x0000052c	// 00000520, wbregs names: ODATA
// RTC clock registers
#define	R_CLOCK        	0x00000530	// 00000530, wbregs names: CLOCK, TIMER
#define	R_TIMER        	0x00000534	// 00000530, wbregs names: TIMER
#define	R_STOPWATCH    	0x00000538	// 00000530, wbregs names: STOPWATCH
#define	R_CKALARM      	0x0000053c	// 00000530, wbregs names: ALARM, CKALARM
// GPS clock test bench registers, for measuring the clock trackers performance
#define	R_GPSTB_FREQ   	0x00000540	// 00000540, wbregs names: GPSFREQ
#define	R_GPSTB_JUMP   	0x00000544	// 00000540, wbregs names: GPSJUMP
#define	R_GPSTB_ERRHI  	0x00000548	// 00000540, wbregs names: ERRHI
#define	R_GPSTB_ERRLO  	0x0000054c	// 00000540, wbregs names: ERRLO
#define	R_GPSTB_COUNTHI	0x00000550	// 00000540, wbregs names: CNTHI
#define	R_GPSTB_COUNTLO	0x00000554	// 00000540, wbregs names: CNTLO
#define	R_GPSTB_STEPHI 	0x00000558	// 00000540, wbregs names: STEPHI
#define	R_GPSTB_STEPLO 	0x0000055c	// 00000540, wbregs names: STEPLO
// HDMI EDID for the input HDMI port


// FLASH erase/program configuration registers
#define	R_QSPI_EREG    	0x00000600	// 00000600, wbregs names: QSPIE
#define	R_QSPI_CREG    	0x00000604	// 00000600, wbregs names: QSPIC
#define	R_QSPI_SREG    	0x00000608	// 00000600, wbregs names: QSPIS
#define	R_QSPI_IDREG   	0x0000060c	// 00000600, wbregs names: QSPII
// GPS UART registers, similar to WBUART
#define	R_GPSU_SETUP   	0x00000610	// 00000610, wbregs names: GPSSETUP
#define	R_GPSU_FIFO    	0x00000614	// 00000610, wbregs names: GPSFIFO
#define	R_GPSU_UARTRX  	0x00000618	// 00000610, wbregs names: GPSRX
#define	R_GPSU_UARTTX  	0x0000061c	// 00000610, wbregs names: GPSTX
// FPGA CONFIG REGISTERS: 0x4e0-0x4ff
#define	R_CFG_CRC      	0x00000680	// 00000680, wbregs names: FPGACRC
#define	R_CFG_FAR      	0x00000684	// 00000680, wbregs names: FPGAFAR
#define	R_CFG_FDRI     	0x00000688	// 00000680, wbregs names: FPGAFDRI
#define	R_CFG_FDRO     	0x0000068c	// 00000680, wbregs names: FPGAFDRO
#define	R_CFG_CMD      	0x00000690	// 00000680, wbregs names: FPGACMD
#define	R_CFG_CTL0     	0x00000694	// 00000680, wbregs names: FPGACTL0
#define	R_CFG_MASK     	0x00000698	// 00000680, wbregs names: FPGAMASK
#define	R_CFG_STAT     	0x0000069c	// 00000680, wbregs names: FPGASTAT
#define	R_CFG_LOUT     	0x000006a0	// 00000680, wbregs names: FPGALOUT
#define	R_CFG_COR0     	0x000006a4	// 00000680, wbregs names: FPGACOR0
#define	R_CFG_MFWR     	0x000006a8	// 00000680, wbregs names: FPGAMFWR
#define	R_CFG_CBC      	0x000006ac	// 00000680, wbregs names: FPGACBC
#define	R_CFG_IDCODE   	0x000006b0	// 00000680, wbregs names: FPGAIDCODE
#define	R_CFG_AXSS     	0x000006b4	// 00000680, wbregs names: FPGAAXSS
#define	R_CFG_COR1     	0x000006b8	// 00000680, wbregs names: FPGACOR1
#define	R_CFG_WBSTAR   	0x000006c0	// 00000680, wbregs names: WBSTAR
#define	R_CFG_TIMER    	0x000006c4	// 00000680, wbregs names: CFGTIMER
#define	R_CFG_BOOTSTS  	0x000006d8	// 00000680, wbregs names: BOOTSTS
#define	R_CFG_CTL1     	0x000006e0	// 00000680, wbregs names: FPGACTL1
#define	R_CFG_BSPI     	0x000006fc	// 00000680, wbregs names: FPGABSPI
// Ethernet configuration (MDIO) port
#define	R_MDIO_BMCR    	0x00000700	// 00000700, wbregs names: BMCR
#define	R_MDIO_BMSR    	0x00000704	// 00000700, wbregs names: BMSR
#define	R_MDIO_PHYIDR1 	0x00000708	// 00000700, wbregs names: PHYIDR1
#define	R_MDIO_PHYIDR2 	0x0000070c	// 00000700, wbregs names: PHYIDR2
#define	R_MDIO_ANAR    	0x00000710	// 00000700, wbregs names: ANAR
#define	R_MDIO_ANLPAR  	0x00000714	// 00000700, wbregs names: ANLPAR
#define	R_MDIO_ANER    	0x00000718	// 00000700, wbregs names: ANER
#define	R_MDIO_ANNPTR  	0x0000071c	// 00000700, wbregs names: ANNPTR
#define	R_MDIO_PHYSTS  	0x00000740	// 00000700, wbregs names: PHYSYTS
#define	R_MDIO_FCSCR   	0x00000750	// 00000700, wbregs names: FCSCR
#define	R_MDIO_RECR    	0x00000754	// 00000700, wbregs names: RECR
#define	R_MDIO_PCSR    	0x00000758	// 00000700, wbregs names: PCSR
#define	R_MDIO_RBR     	0x0000075c	// 00000700, wbregs names: RBR
#define	R_MDIO_LEDCR   	0x00000760	// 00000700, wbregs names: LEDCR
#define	R_MDIO_PHYCR   	0x00000764	// 00000700, wbregs names: PHYCR
#define	R_MDIO_BTSCR   	0x00000768	// 00000700, wbregs names: BTSCR
#define	R_MDIO_CDCTRL  	0x0000076c	// 00000700, wbregs names: CDCTRL
#define	R_MDIO_EDCR    	0x00000774	// 00000700, wbregs names: EDCR
#define	BKRAM          	0x00100000	// 00100000, wbregs names: RAM
#define	FLASHMEM       	0x01000000	// 01000000, wbregs names: FLASH


// Definitions for the bus masters
// And then from the peripherals

#define	ISPIF_EN	0x80010001
#define	ISPIF_DIS	0x00010001
#define	ISPIF_CLR	0x00000001
#define	SZPAGEB		256
#define	PGLENB		256
#define	SZPAGEW		64
#define	PGLENW		64
#define	NPAGES		256
#define	SECTORSZB	(NPAGES * SZPAGEB)	// In bytes, not words!!
#define	SECTORSZW	(NPAGES * SZPAGEW)	// In words
#define	NSECTORS	64
#define	SECTOROF(A)	((A) & (-1<<16))
#define	SUBSECTOROF(A)	((A) & (-1<<12))
#define	PAGEOF(A)	((A) & (-1<<8))

// End of definitions from REGS.INSERT.H


typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);

#endif	// REGDEFS_H
