////////////////////////////////////////////////////////////////////////////////
//
// Filename:	demo-out/regdefs.h
//
// Project:	VideoZip, a ZipCPU SoC supporting video functionality
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	./autofpga ./autofpga bkram.txt enet.txt flash.txt gps.txt icape.txt mdio.txt wbuart.txt sdspi.txt wbmouse.txt wboled.txt clkcounter.txt gpio.txt pwrcount.txt version.txt buserr.txt zipmaster.txt pic.txt rtcgps.txt clock.txt hdmi.txt wbubus.txt dlyarbiter.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2017, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	REGDEFS_H
#define	REGDEFS_H


// FLASH erase/program configuration registers
#define	R_QSPI_EREG   	0x00000800	// 00000800, wbregs names: QSPIE
#define	R_QSPI_CREG   	0x00000804	// 00000800, wbregs names: QSPIC
#define	R_QSPI_SREG   	0x00000808	// 00000800, wbregs names: QSPIS
#define	R_QSPI_IDREG  	0x0000080c	// 00000800, wbregs names: QSPII
// FPGA CONFIG REGISTERS: 0x4e0-0x4ff
#define	R_CFG_CRC     	0x00000880	// 00000880, wbregs names: FPGACRC
#define	R_CFG_FAR     	0x00000884	// 00000880, wbregs names: FPGAFAR
#define	R_CFG_FDRI    	0x00000888	// 00000880, wbregs names: FPGAFDRI
#define	R_CFG_FDRO    	0x0000088c	// 00000880, wbregs names: FPGAFDRO
#define	R_CFG_CMD     	0x00000890	// 00000880, wbregs names: FPGACMD
#define	R_CFG_CTL0    	0x00000894	// 00000880, wbregs names: FPGACTL0
#define	R_CFG_MASK    	0x00000898	// 00000880, wbregs names: FPGAMASK
#define	R_CFG_STAT    	0x0000089c	// 00000880, wbregs names: FPGASTAT
#define	R_CFG_LOUT    	0x000008a0	// 00000880, wbregs names: FPGALOUT
#define	R_CFG_COR0    	0x000008a4	// 00000880, wbregs names: FPGACOR0
#define	R_CFG_MFWR    	0x000008a8	// 00000880, wbregs names: FPGAMFWR
#define	R_CFG_CBC     	0x000008ac	// 00000880, wbregs names: FPGACBC
#define	R_CFG_IDCODE  	0x000008b0	// 00000880, wbregs names: FPGAIDCODE
#define	R_CFG_AXSS    	0x000008b4	// 00000880, wbregs names: FPGAAXSS
#define	R_CFG_COR1    	0x000008b8	// 00000880, wbregs names: FPGACOR1
#define	R_CFG_WBSTAR  	0x000008c0	// 00000880, wbregs names: WBSTAR
#define	R_CFG_TIMER   	0x000008c4	// 00000880, wbregs names: CFGTIMER
#define	R_CFG_BOOTSTS 	0x000008d8	// 00000880, wbregs names: BOOTSTS
#define	R_CFG_CTL1    	0x000008e0	// 00000880, wbregs names: FPGACTL1
#define	R_CFG_BSPI    	0x000008fc	// 00000880, wbregs names: FPGABSPI
// Ethernet configuration (MDIO) port
#define	R_MDIO_BMCR   	0x00000900	// 00000900, wbregs names: BMCR
#define	R_MDIO_BMSR   	0x00000904	// 00000900, wbregs names: BMSR
#define	R_MDIO_PHYIDR1	0x00000908	// 00000900, wbregs names: PHYIDR1
#define	R_MDIO_PHYIDR2	0x0000090c	// 00000900, wbregs names: PHYIDR2
#define	R_MDIO_ANAR   	0x00000910	// 00000900, wbregs names: ANAR
#define	R_MDIO_ANLPAR 	0x00000914	// 00000900, wbregs names: ANLPAR
#define	R_MDIO_ANER   	0x00000918	// 00000900, wbregs names: ANER
#define	R_MDIO_ANNPTR 	0x0000091c	// 00000900, wbregs names: ANNPTR
#define	R_MDIO_PHYSTS 	0x00000940	// 00000900, wbregs names: PHYSYTS
#define	R_MDIO_FCSCR  	0x00000950	// 00000900, wbregs names: FCSCR
#define	R_MDIO_RECR   	0x00000954	// 00000900, wbregs names: RECR
#define	R_MDIO_PCSR   	0x00000958	// 00000900, wbregs names: PCSR
#define	R_MDIO_RBR    	0x0000095c	// 00000900, wbregs names: RBR
#define	R_MDIO_LEDCR  	0x00000960	// 00000900, wbregs names: LEDCR
#define	R_MDIO_PHYCR  	0x00000964	// 00000900, wbregs names: PHYCR
#define	R_MDIO_BTSCR  	0x00000968	// 00000900, wbregs names: BTSCR
#define	R_MDIO_CDCTRL 	0x0000096c	// 00000900, wbregs names: CDCTRL
#define	R_MDIO_EDCR   	0x00000974	// 00000900, wbregs names: EDCR
#define	R_NET_RXBUF   	0x00004000	// 00004000, wbregs names: NETRXB
#define	R_NET_TXBUF   	0x00006000	// 00004000, wbregs names: NETTXB
#define	BKRAM         	0x00080000	// 00080000, wbregs names: RAM
#define	FLASHMEM      	0x01000000	// 01000000, wbregs names: FLASH


// Definitions for the bus masters
// And then from the peripherals
#define	SZPAGEB		256
#define	PGLENB		256
#define	SZPAGEW		64
#define	PGLENW		64
#define	NPAGES		256
#define	SECTORSZB	(NPAGES * SZPAGEB)	// In bytes, not words!!
#define	SECTORSZW	(NPAGES * SZPAGEW)	// In words
#define	NSECTORS	64
#define	SECTOROF(A)	((A) & (-1<<16))
#define	SUBSECTOROF(A)	((A) & (-1<<12))
#define	PAGEOF(A)	((A) & (-1<<8))


#define	ISPIF_EN	0x80040004
#define	ISPIF_DIS	0x00040004
#define	ISPIF_CLR	0x00000004
// End of definitions from REGS.INSERT.H


typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);

#endif	// REGDEFS_H
