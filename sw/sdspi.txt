################################################################################
##
## Filename: 	sdspi.c
##
## Project:	AutoFPGA, a utility for composing FPGA designs from peripherals
##
## Purpose:	Describes how to connect an SD-SPI peripheral to a wishbone
##		bus, as used by autofpga.  Note how the description requires
##	both a description of what needs to take place in a top level file, as
##	well as in the main
##
##	An interesting consequence of this description is that upgrading to a
##	proper SDIO device would involve no more than swapping this file for an
##	sdio.c peripheral description file.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2017, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=sdcard
@NADDR=4
@ACCESS=SDSPI_ACCESS
@PTYPE=DOUBLE
@INTERRUPT= sdcard_int
@INTNAME= SDCARD
@TOP.PORTLIST=
		// SD Card
		o_sd_sck, io_sd_cmd, io_sd, i_sd_cs, i_sd_wp
@TOP.DECL=
	// SD Card
	output	wire		o_sd_sck;
	inout			io_sd_cmd;
	inout		[3:0]	io_sd;
	input			i_sd_cs;
	input			i_sd_wp;
@TOP.DEFNS=
	wire		w_sd_cmd;
	wire	[3:0]	w_sd_data;
@TOP.MAIN=
		// SD Card
		o_sd_sck, w_sd_cmd, w_sd_data, io_sd_cmd, io_sd, i_sd_cs
@TOP.INSERT=
	//
	//
	// Wires for setting up the SD Card Controller
	//
	//
	assign io_sd_cmd = w_sd_cmd ? 1'bz:1'b0;
	assign io_sd[0] = w_sd_data[0]? 1'bz:1'b0;
	assign io_sd[1] = w_sd_data[1]? 1'bz:1'b0;
	assign io_sd[2] = w_sd_data[2]? 1'bz:1'b0;
	assign io_sd[3] = w_sd_data[3]? 1'bz:1'b0;
@MAIN.PORTLIST=
		// The SD-Card wires
		o_sd_sck, o_sd_cmd, o_sd_data, i_sd_cmd, i_sd_data, i_sd_detect
@MAIN.IODECL=
	// SD-Card declarations
	output	wire		o_sd_sck, o_sd_cmd;
	output	wire	[3:0]	o_sd_data;
	input			i_sd_cmd;
	input		[3:0]	i_sd_data;
	input			i_sd_detect;
@MAIN.INSERT=
	wire[31:0]	sd_debug;
	// SPI mapping
	wire	w_sd_cs_n, w_sd_mosi, w_s_miso;

	sdspi	sdctrl(i_clk,
		wb_cyc, (wb_stb)&&(sdcard_sel), wb_we,
			wb_addr[1:0], wb_data,
			sdcard_ack, sdcard_stall, sdcard_data,
		w_sd_cs_n, o_sd_sck, w_sd_mosi, w_sd_miso,
		sdcard_int, 1\'b1, sd_dbg);

	assign	w_sd_miso = i_sd_data[0];
	assign	o_sd_data = { w_sd_cs_n, 3\'b111 };
	assign	o_sd_cmd  = w_sd_mosi;
@MAIN.ALT=
	assign	o_sd_sck   = 1\'b1;
	assign	o_sd_cmd   = 1\'b1;
	assign	o_sd_data  = 4\'hf;
	assign	sdcard_int = 1'b0
@TOP.INSERT=
	//
	//
	// Wires for setting up the SD Card Controller
	//
	//
	assign io_sd_cmd = w_sd_cmd ? 1'bz:1'b0;
	assign io_sd[0] = w_sd_data[0]? 1'bz:1'b0;
	assign io_sd[1] = w_sd_data[1]? 1'bz:1'b0;
	assign io_sd[2] = w_sd_data[2]? 1'bz:1'b0;
	assign io_sd[3] = w_sd_data[3]? 1'bz:1'b0;
@REGS.N=4
@REGS.NOTE= // SD-SPI addresses
@REGS.0= 0 R_SDCARD_CTRL  	SDCARD
@REGS.1= 1 R_SDCARD_DATA 	SDDATA
@REGS.2= 2 R_SDCARD_FIFOA	SDFIFOA, SDFIF0, SDFIFA
@REGS.3= 3 R_SDCARD_FIFOB	SDFIFOB, SDFIF1, SDFIFB
@CSTRUCT=
#define	SD_SETAUX	0x0ff
#define	SD_READAUX	0x0bf
#define	SD_CMD		0x040
#define	SD_FIFO_OP	0x0800	// Read only
#define	SD_WRITEOP	0x0c00	// Write to the FIFO
#define	SD_ALTFIFO	0x1000
#define	SD_BUSY		0x4000
#define	SD_ERROR	0x8000
#define	SD_CLEARERR	0x8000
#define	SD_READ_SECTOR	((SD_CMD|SD_CLEARERR|SD_FIFO_OP)+17)
#define	SD_WRITE_SECTOR	((SD_CMD|SD_CLEARERR|SD_WRITEOP)+24)

typedef	struct SDCARD_S {
	unsigned	sd_ctrl, sd_data, sd_fifo[2];
} SDCARD;
@IONAME=io_sd
