################################################################################
##
## Filename: 	wbuart.txt
##
## Project:	AutoGen, a utility for composing FPGA designs from peripherals
##
## Purpose:	To describe a UART for autogen to work with.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2017, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
# The prefix is used to create a series of bus data lines for interaction with
# the bus.  In this case, these will be uart_sel, uart_ack, uart_stall, and
# uart_data.
@PREFIX=uart
# The number of addressable registers this peripheral has on the wishbone bus.
# Set this to zero to have no bus presence.
@NADDR=	4
# The type of peripheral.  This can either:
#	NOBUS	Doesn't reply on the bus
#	SINGLE, for a peripheral that only has one address, and whose result
#		is available on every clock.  In the future, these may be
#		gathered together into a singleio.v file.
#	DOUBLE, for a peripheral that takes one clock to access before its
#		value is available on its output.  This might be true for a
#		peripheral that has several single-clocked registers within it,
#		which then selects from among these registers in one clock
#		cycle.  In the future, these may be gathered together into a
#		doubleio.v file.
#	OTHER (the default), for a peripheral that may take *many* clocks to
#		respond to a bus transaction, ... one that uses its stall
#		line of a necessity.
@PTYPE=	DOUBLE
@ACCESS= CONSOLE_ACCESS
@MAIN.PORTLIST=
		// The UART console
		i_aux_rx, o_aux_tx, i_aux_cts_n, o_aux_rts_n
@MAIN.IODECL=
	input			i_aux_rx, i_aux_cts_n;
	output	wire		o_aux_tx, o_aux_rts_n;";
# @MAIN.DEFNS=
@MAIN.INSERT=
	wbuart #(.DEFAULT_STEP(GPSCLOCK_DEFAULT_STEP))
 		console(i_clk, 1\'b0,
 			(wb_stb)&&(uart_sel), wb_we, wb_addr[1:0], wb_data,
 			uart_ack, uart_stall, uart_data,
 			i_aux_rx, o_aux_tx, i_aux_cts_n, o_aux_rts_n,
			uartrx_int, uarttx_int, uartrxf_int, uarttxf_int);
@MAIN.INTERRUPTS = uartrx_int, uarttx_int, uartrxf_int, uarttxf_int
@MAIN.ALT
	assign	o_uart_tx    = 1\'b1;
	assign	o_uart_rts_n = 1\'b0;
@TOPLEVEL=
# @SCOPE.DATA=
# @SCOPE.TRIGGER=
@REGS.N = 4
@REGS.0 = 0 R_UART_SETUP	 USETUP
@REGS.1 = 1 R_UART_FIFO		 UFIFO
@REGS.2 = 2 R_UART_UARTRX	 RX
@REGS.3 = 3 R_UART_UARTTX	 TX

@CSTRUCT =

#define UART_PARITY_NONE        0
#define UART_HWFLOW_OFF         0x40000000
#define UART_PARITY_ODD         0x04000000
#define UART_PARITY_EVEN        0x05000000
#define UART_PARITY_SPACE       0x06000000
#define UART_PARITY_MARK        0x07000000
#define UART_STOP_ONEBIT        0
#define UART_STOP_TWOBITS       0x08000000
#define UART_DATA_8BITS         0
#define UART_DATA_7BITS         0x10000000
#define UART_DATA_6BITS         0x20000000
#define UART_DATA_5BITS         0x30000000
#define UART_RX_BREAK           0x0800
#define UART_RX_FRAMEERR        0x0400
#define UART_RX_PARITYERR       0x0200
#define UART_RX_NOTREADY        0x0100
#define UART_RX_ERR             (-256)
#define UART_TX_BUSY            0x0100
#define UART_TX_BREAK           0x0200

typedef struct  WBUART_S {
	unsigned\t_setup;
	unsigned\t_fifo;
	unsigned\t_rx, u_tx;
} WBUART;


@IONAME= io_uart
