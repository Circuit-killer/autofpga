################################################################################
##
## Filename: 	gpio.txt
##
## Project:	AutoFPGA, a utility for composing FPGA designs from peripherals
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2017, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=gpio
@NADDR=1
@ACCESS=GPIO_ACCESS
@PTYPE=SINGLE
# @SINGLE.OUTPUTS= o_gpio
# @SINGLE.INPUTS=  i_gpio
@INT.GPIO.WIRE=gpio_int
@INT.GPIO.PIC=altpic
@TOP.PORTLIST=
		// GPIO wires
		io_hdmi_in_cec,
		o_hdmi_in_hpa,	// Hotplug assert
		o_hdmi_in_txen,
		io_hdmi_out_cec,
		i_hdmi_out_hpd, // Hotplug detect
		o_sd_reset, i_sd_cd,
		i_gps_3df
@TOP.IODECL=
	// GPIO wires
	inout	wire	io_hdmi_in_cec;
	output	wire	o_hdmi_in_hpa;
	output	wire	o_hdmi_in_txen;
	inout	wire	io_hdmi_out_cec;
	input	wire	i_hdmi_out_hpd;
	input	wire	i_sd_cd;
	output	wire	o_sd_reset;
	input	wire	i_gps_3df;
@TOP.DEFNS=
	// GPIO declarations.  The two wire busses are just virtual lists of
	// input (or output) ports.
	wire	[14:0]	i_gpio, o_gpio;
	wire		w_hdmi_out_en;
@TOP.MAIN=
		// GPIO wires
		i_gpio, o_gpio
@TOP.INSERT=
	assign	i_gpio = { 10'h0, i_gps_3df, i_hdmi_out_hpd, i_sd_cd, io_hdmi_out_cec, io_hdmi_in_cec };
	assign	io_hdmi_in_cec  = o_gpio[0] ? 1'bz : 1'b0;
	assign	io_hdmi_out_cec = o_gpio[1] ? 1'bz : 1'b0;
	assign	o_hdmi_in_txen  = o_gpio[2];
	assign	o_sd_reset      = o_gpio[3];
	assign	o_hdmi_in_hpa   = o_gpio[4];	// Hotplug assert
	assign	w_hdmi_out_en   = o_gpio[5];
@MAIN.PORTLIST=
		// GPIO ports
		i_gpio, o_gpio
@MAIN.DEFNS=
	localparam	NGPI = 15, NGPO=15;
	// GPIO ports
	input		[(NGPI-1):0]	i_gpio;
	output	wire	[(NGPO-1):0]	o_gpio;
@MAIN.INSERT=
	//
	// GPIO
	//
	// Not used (yet), but this interface should allow us to control up to
	// 16 GPIO inputs, and another 16 GPIO outputs.  The interrupt trips
	// when any of the inputs changes.  (Sorry, which input isn't (yet)
	// selectable.)
	//
	localparam	INITIAL_GPIO = 15'h03;
	wbgpio	#(NGPI, NGPO, INITIAL_GPIO)
		gpioi(i_clk, 1'b1, (wb_stb)&&(gpio_sel), 1'b1,
			wb_data, gpio_data, i_gpio, o_gpio, gpio_int);
@REGS.N=1
@REGS.0= 0 R_GPIO GPIO GPI GPO
@BDEF.DEFNS=
#define	GPIO_SD_DETECTED	0x000040000
#define	GPIO_HDMI_IN_ENB	0x000000004
#define	GPIO_HDMI_IN_ENB_SET	0x000400004
#define	GPIO_HDMI_IN_ENB_CLR	0x000400000
#define	GPIO_SD_RESET		0x000000008
#define	GPIO_SD_RESET_SET	0x000080008
#define	GPIO_SD_RESET_CLR	0x000080000
#define	GPIO_HDMI_IN_HPA	0x000000010
#define	GPIO_HDMI_IN_HPA_SET	0x001000010
#define	GPIO_HDMI_IN_HPA_CLR	0x001000000
#define	GPIO_HDMI_OUT_EN	0x000000020
#define	GPIO_HDMI_OUT_EN_SET	0x002000020
#define	GPIO_HDMI_OUT_EN_CLR	0x002000000
@BDEF.IONAME=	i_gpio
@BDEF.IOTYPE=	unsigned
@BDEF.OSDEF=	_BOARD_HAS_GPIO
@BDEF.OSVAL=	static volatile @$THIS.BDEF.IOTYPE *const _gpio = ((@$THIS.BDEF.IOTYPE *)@$THIS.BASE);
