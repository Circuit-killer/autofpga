////////////////////////////////////////////////////////////////////////////////
//
// Filename:	../demo-out/regdefs.h
//
// Project:	VideoZip, a ZipCPU SoC supporting video functionality
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	./autofpga ./autofpga -o ../demo-out ../auto-data/global.txt ../auto-data/clock.txt ../auto-data/bkram.txt ../auto-data/flash.txt ../auto-data/zipmaster.txt ../auto-data/wbubus.txt ../auto-data/dlyarbiter.txt ../auto-data/gps.txt ../auto-data/icape.txt ../auto-data/mdio.txt ../auto-data/spio.txt ../auto-data/wboledbw.txt ../auto-data/rtcdate.txt ../auto-data/hdmi.txt ../auto-data/clkcounter.txt ../auto-data/gpio.txt ../auto-data/pwrcount.txt ../auto-data/wbpmic.txt ../auto-data/version.txt ../auto-data/buserr.txt ../auto-data/pic.txt ../auto-data/rtcgps.txt ../auto-data/wbmouse.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2017, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	REGDEFS_H
#define	REGDEFS_H


#define	R_BUSERR          	0x00000400	// 00000400, wbregs names: BUSERR
#define	R_PIC             	0x00000404	// 00000404, wbregs names: PIC
// HDMI-IN Clock Counter (measures clock speed)
#define	R_HDMI_INCLK      	0x00000408	// 00000408, wbregs names: HCLKIN
// HDMI-OUT Clock Counter (measures clock speed)
#define	R_HDMI_OUTCLK     	0x0000040c	// 0000040c, wbregs names: HCLKOUT
#define	R_DATE            	0x00000410	// 00000410, wbregs names: RTCDATE, DATE
#define	R_GPIO            	0x00000414	// 00000414, wbregs names: GPIO, GPI, GPO
#define	PWCOUNT           	0x00000418	// 00000418, wbregs names: PWRCOUNT
#define	R_SPIO            	0x0000041c	// 0000041c, wbregs names: SPIO
// SYSCLK Clock Counter (measures clock speed)
#define	R_SYSCLK          	0x00000420	// 00000420, wbregs names: SYSCLK
#define	R_VERSION         	0x00000424	// 00000424, wbregs names: VERSION


// EDID/I2C Debug Scope
#define	R_EDID_SCOPC      	0x00000600	// 00000600, wbregs names: ESCOPC, ESCOPE
#define	R_EDID_SCOPD      	0x00000604	// 00000600, wbregs names: ESCOPD
// Scope outputs, for the hdmi input values
#define	R_SCOP_HDMIIN_CTRL	0x00000608	// 00000608, wbregs names: HINSCOPC, HINSCOPE
#define	R_SCOP_HDMIIN_DATA	0x0000060c	// 00000608, wbregs names: HINSCOPD
// GPS clock tracker, control loop settings registers
#define	R_GPS_ALPHA       	0x00000610	// 00000610, wbregs names: ALPHA
#define	R_GPS_BETA        	0x00000614	// 00000610, wbregs names: BETA
#define	R_GPS_GAMMA       	0x00000618	// 00000610, wbregs names: GAMMA
#define	R_GPS_STEP        	0x0000061c	// 00000610, wbregs names: STEP
// Histogram of HDMI input words
#define	R_HINH_CTRL       	0x00000620	// 00000620, wbregs names: HINHISTC, HINHC
#define	R_HINH_RED        	0x00000624	// 00000620, wbregs names: HINHISTR, HINHR
#define	R_HINH_GREEN      	0x00000628	// 00000620, wbregs names: HINHISTG, HINHG
#define	R_HINH_BLUE       	0x0000062c	// 00000620, wbregs names: HINHISTB, HINHB
#define	R_MOUSE_STAT      	0x00000630	// 00000630, wbregs names: MSTAT
#define	R_MOUSE_RAW       	0x00000634	// 00000630, wbregs names: MRAW
#define	R_SCRN_MOUSE      	0x00000638	// 00000630, wbregs names: MOUSE
#define	R_SCRN_SIZE       	0x0000063c	// 00000630, wbregs names: MSIZ
#define	R_OLED_CMD        	0x00000640	// 00000640, wbregs names: OLED
#define	R_OLED_CDATA      	0x00000644	// 00000640, wbregs names: OLEDCA
#define	R_OLED_CDATB      	0x00000648	// 00000640, wbregs names: OLEDCB
#define	R_OLED_DATA       	0x0000064c	// 00000640, wbregs names: ODATA
// RTC clock registers
#define	R_CLOCK           	0x00000650	// 00000650, wbregs names: CLOCK, TIMER
#define	R_TIMER           	0x00000654	// 00000650, wbregs names: TIMER
#define	R_STOPWATCH       	0x00000658	// 00000650, wbregs names: STOPWATCH
#define	R_CKALARM         	0x0000065c	// 00000650, wbregs names: ALARM, CKALARM
// GPS clock test bench registers, for measuring the clock trackers performance
#define	R_GPSTB_FREQ      	0x00000660	// 00000660, wbregs names: GPSFREQ
#define	R_GPSTB_JUMP      	0x00000664	// 00000660, wbregs names: GPSJUMP
#define	R_GPSTB_ERRHI     	0x00000668	// 00000660, wbregs names: ERRHI
#define	R_GPSTB_ERRLO     	0x0000066c	// 00000660, wbregs names: ERRLO
#define	R_GPSTB_COUNTHI   	0x00000670	// 00000660, wbregs names: CNTHI
#define	R_GPSTB_COUNTLO   	0x00000674	// 00000660, wbregs names: CNTLO
#define	R_GPSTB_STEPHI    	0x00000678	// 00000660, wbregs names: STEPHI
#define	R_GPSTB_STEPLO    	0x0000067c	// 00000660, wbregs names: STEPLO
// HDMI EDID for the input HDMI port
#define	R_EDID_IN         	0x00000680	// 00000680, wbregs names: EDIN
// HDMI EDID for the output (source) HDMI port
#define	R_EDID_CMD        	0x00000700	// 00000700, wbregs names: EDCMD
#define	R_EDID_SPD        	0x00000704	// 00000700, wbregs names: EDSPD
#define	R_EDID_OUT        	0x00000780	// 00000700, wbregs names: EDOUT


// WB-Microphone registers
#define	R_MIC_DATA        	0x00000800	// 00000800, wbregs names: MICD
#define	R_MIC_CTRL        	0x00000804	// 00000800, wbregs names: MICC
// FLASH erase/program configuration registers
#define	R_QSPI_EREG       	0x00000810	// 00000810, wbregs names: QSPIE
#define	R_QSPI_CREG       	0x00000814	// 00000810, wbregs names: QSPIC
#define	R_QSPI_SREG       	0x00000818	// 00000810, wbregs names: QSPIS
#define	R_QSPI_IDREG      	0x0000081c	// 00000810, wbregs names: QSPII
// GPS UART registers, similar to WBUART
#define	R_GPSU_SETUP      	0x00000820	// 00000820, wbregs names: GPSSETUP
#define	R_GPSU_FIFO       	0x00000824	// 00000820, wbregs names: GPSFIFO
#define	R_GPSU_UARTRX     	0x00000828	// 00000820, wbregs names: GPSRX
#define	R_GPSU_UARTTX     	0x0000082c	// 00000820, wbregs names: GPSTX
// FPGA CONFIG REGISTERS: 0x4e0-0x4ff
#define	R_CFG_CRC         	0x00000880	// 00000880, wbregs names: FPGACRC
#define	R_CFG_FAR         	0x00000884	// 00000880, wbregs names: FPGAFAR
#define	R_CFG_FDRI        	0x00000888	// 00000880, wbregs names: FPGAFDRI
#define	R_CFG_FDRO        	0x0000088c	// 00000880, wbregs names: FPGAFDRO
#define	R_CFG_CMD         	0x00000890	// 00000880, wbregs names: FPGACMD
#define	R_CFG_CTL0        	0x00000894	// 00000880, wbregs names: FPGACTL0
#define	R_CFG_MASK        	0x00000898	// 00000880, wbregs names: FPGAMASK
#define	R_CFG_STAT        	0x0000089c	// 00000880, wbregs names: FPGASTAT
#define	R_CFG_LOUT        	0x000008a0	// 00000880, wbregs names: FPGALOUT
#define	R_CFG_COR0        	0x000008a4	// 00000880, wbregs names: FPGACOR0
#define	R_CFG_MFWR        	0x000008a8	// 00000880, wbregs names: FPGAMFWR
#define	R_CFG_CBC         	0x000008ac	// 00000880, wbregs names: FPGACBC
#define	R_CFG_IDCODE      	0x000008b0	// 00000880, wbregs names: FPGAIDCODE
#define	R_CFG_AXSS        	0x000008b4	// 00000880, wbregs names: FPGAAXSS
#define	R_CFG_COR1        	0x000008b8	// 00000880, wbregs names: FPGACOR1
#define	R_CFG_WBSTAR      	0x000008c0	// 00000880, wbregs names: WBSTAR
#define	R_CFG_TIMER       	0x000008c4	// 00000880, wbregs names: CFGTIMER
#define	R_CFG_BOOTSTS     	0x000008d8	// 00000880, wbregs names: BOOTSTS
#define	R_CFG_CTL1        	0x000008e0	// 00000880, wbregs names: FPGACTL1
#define	R_CFG_BSPI        	0x000008fc	// 00000880, wbregs names: FPGABSPI
// Ethernet configuration (MDIO) port
#define	R_MDIO_BMCR       	0x00000900	// 00000900, wbregs names: BMCR
#define	R_MDIO_BMSR       	0x00000904	// 00000900, wbregs names: BMSR
#define	R_MDIO_PHYIDR1    	0x00000908	// 00000900, wbregs names: PHYIDR1
#define	R_MDIO_PHYIDR2    	0x0000090c	// 00000900, wbregs names: PHYIDR2
#define	R_MDIO_ANAR       	0x00000910	// 00000900, wbregs names: ANAR
#define	R_MDIO_ANLPAR     	0x00000914	// 00000900, wbregs names: ANLPAR
#define	R_MDIO_ANER       	0x00000918	// 00000900, wbregs names: ANER
#define	R_MDIO_ANNPTR     	0x0000091c	// 00000900, wbregs names: ANNPTR
#define	R_MDIO_PHYSTS     	0x00000940	// 00000900, wbregs names: PHYSYTS
#define	R_MDIO_FCSCR      	0x00000950	// 00000900, wbregs names: FCSCR
#define	R_MDIO_RECR       	0x00000954	// 00000900, wbregs names: RECR
#define	R_MDIO_PCSR       	0x00000958	// 00000900, wbregs names: PCSR
#define	R_MDIO_RBR        	0x0000095c	// 00000900, wbregs names: RBR
#define	R_MDIO_LEDCR      	0x00000960	// 00000900, wbregs names: LEDCR
#define	R_MDIO_PHYCR      	0x00000964	// 00000900, wbregs names: PHYCR
#define	R_MDIO_BTSCR      	0x00000968	// 00000900, wbregs names: BTSCR
#define	R_MDIO_CDCTRL     	0x0000096c	// 00000900, wbregs names: CDCTRL
#define	R_MDIO_EDCR       	0x00000974	// 00000900, wbregs names: EDCR
#define	BKRAM             	0x00100000	// 00100000, wbregs names: RAM
#define	FLASHMEM          	0x01000000	// 01000000, wbregs names: FLASH


// Definitions for the bus masters
#define	CLKFREQHZ	100000000
// And then from the peripherals
#define	SZPAGEB		256
#define	PGLENB		256
#define	SZPAGEW		64
#define	PGLENW		64
#define	NPAGES		256
#define	SECTORSZB	(NPAGES * SZPAGEB)	// In bytes, not words!!
#define	SECTORSZW	(NPAGES * SZPAGEW)	// In words
#define	NSECTORS	64
#define	SECTOROF(A)	((A) & (-1<<16))
#define	SUBSECTOROF(A)	((A) & (-1<<12))
#define	PAGEOF(A)	((A) & (-1<<8))


#define	ISPIF_EN	0x80010001
#define	ISPIF_DIS	0x00010001
#define	ISPIF_CLR	0x00000001
// And finally any master REGDEFS.INSERT.H tags
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.INSERT.H


#endif	// REGDEFS_H
